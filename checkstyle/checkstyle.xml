<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
	"-//Puppy Crawl//DTD Check Configuration 1.3//EN"
	"http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!-- CheckStyle configuration for Red Hat JBoss Middleware QA -->
<module name="Checker">

	<module name="FileTabCharacter"/>

	<module name="SuppressWithPlainTextCommentFilter"/>

	<!-- Checks whether files end with a new line -->
	<!-- http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
	<!-- Checks that TODOs are named and have content -->
	<!-- http://checkstyle.sourceforge.net/config_misc.html#TodoComment -->
	<module name="RegexpSingleline">
	    <!-- // CHECKSTYLE:OFF To avoid TODO check -->
		<property name="format" value="((//.*)|(\*.*))TODO(?!(\([a-z]{2,8}\): .+))"/>
		<!-- // CHECKSTYLE:ON -->
		<property name="message" value='TODOs should be named and have content: e.g. "TODO(username): Change to..."'/>
	</module>

	<!-- Checks for long source files -->
	<module name="LineLength">
		<property name="max" value="150"/>
		<property name="fileExtensions" value="java"/>
	</module>

	<module name="TreeWalker">
		<property name="tabWidth" value="4"/> <!-- Default tab size for java files -->

		<module name="SuppressionCommentFilter"/>

		<!-- Whitespace check -->
		<!-- http://checkstyle.sourceforge.net/config_whitespace.html -->

		<!-- Checks that there are no whitespaces around the Generic tokens < and > -->
		<module name="GenericWhitespace"/>
		<!-- Checks no padding of an empty for initializer -->
		<module name="EmptyForInitializerPad"/>
		<!-- Checks no padding of an empty for iterator -->
		<module name="EmptyForIteratorPad"/>
		<module name="EmptyLineSeparator">
			<property name="allowNoEmptyLineBetweenFields" value="true"/>
			<property name="allowMultipleEmptyLines" value="false"/>
			<property name="allowMultipleEmptyLinesInsideClassMembers" value="false"/>
		</module>
		<!-- Checks no padding between the identifier of a method definition / call -->
		<module name="MethodParamPad"/>
		<!-- Checks that there is no whitespace after a token -->
		<module name="NoWhitespaceAfter">
			<property name="tokens" value="ARRAY_INIT"/>
			<property name="allowLineBreaks" value="true"/>
		</module>
		<module name="NoWhitespaceAfter">
			<property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>
			<property name="allowLineBreaks" value="false"/>
		</module>
		<!-- Checks that there is no whitespace before a token -->
		<module name="NoWhitespaceBefore">
			<property name="tokens" value="DOT"/>
			<property name="allowLineBreaks" value="true"/>
		</module>
		<module name="NoWhitespaceBefore">
			<property name="tokens" value="SEMI, POST_DEC, POST_INC"/>
			<property name="allowLineBreaks" value="false"/>
		</module>
		<!-- Checks the policy on how to wrap lines on operators -->
		<module name="OperatorWrap"/>
		<!-- Checks the policy on the padding of parentheses -->
		<module name="ParenPad"/>
		<!-- Checks the policy on the padding of parentheses for typecasts -->
		<module name="TypecastParenPad"/>
		<!-- Checks that a token (coma, semi, typecast) is followed by whitespace. -->
		<module name="WhitespaceAfter"/>
		<!-- Checks that a token (assign, bor, etc.) is surrounded by whitespace -->
		<module name="WhitespaceAround"/>

		<!-- Checks for Javadoc comments -->
		<!-- http://checkstyle.sf.net/config_javadoc.html -->

		<!-- Validates Javadoc comments to help ensure they are well formed -->
		<module name="JavadocStyle">
			<property name="checkEmptyJavadoc" value="true"/>
			<property name="checkFirstSentence" value="false"/>
		</module>

		<!-- Checks for naming conventions -->
		<!-- http://checkstyle.sf.net/config_naming.html -->

		<module name="ClassTypeParameterName">
			<property name="format" value="^[A-Z]+$"/>
		</module>
		<module name="LocalFinalVariableName"/>
		<module name="LocalVariableName"/>
		<module name="MemberName">
			<property name="format" value="^[a-z][a-zA-Z0-9_]*$"/>
		</module>
		<module name="MethodName">
			<property name="format" value="^[a-z][a-zA-Z0-9_]*$"/>
		</module>
		<module name="MethodTypeParameterName"/>
		<module name="PackageName"/>
		<module name="ParameterName">
			<property name="format" value="^[a-z][a-zA-Z0-9_]*$"/>
		</module>
		<module name="StaticVariableName"/>
		<module name="TypeName"/>

		<!-- Checks for size violations -->
		<!-- http://checkstyle.sf.net/config_sizes.html -->

		<!-- Checks for long anonymous inner classes -->
		<module name="AnonInnerLength">
			<property name="max" value="50"/>
		</module>

		<!-- Checks for imports -->
		<!-- http://checkstyle.sourceforge.net/config_imports.html -->

		<!-- Checks that there are no import statements that use the * notation -->
		<module name="AvoidStarImport"/>
		<!-- Checks for imports from a set of illegal packages -->
		<module name="IllegalImport"/> <!-- defaults to sun.* packages -->
		<!-- Checks for redundant import statements -->
		<module name="RedundantImport"/>
		<!-- Checks for unused import statements -->
		<module name="UnusedImports"/>
		<!-- Checks for out of order import statement. -->
		<module name="ImportOrder">
			<!-- Static imports go first -->
			<property name="option" value="top"/>
			<!-- Imports groups -->
			<property name="groups" value="software.tnb,org.jboss.fuse.tnb,org.junit,org,com,javax,java,"/>
			<property name="staticGroups" value="software.tnb,org.jboss.fuse.tnb,org.junit,org,com,javax,java,"/>
			<!-- Imports groups separated by one blank line -->
			<property name="separated" value="true"/>
			<property name="separatedStaticGroups" value="true"/>
		</module>

		<!-- Modifiers -->
		<!-- http://checkstyle.sourceforge.net/config_modifier.html -->

		<!-- Checks that the order of modifiers conforms to the suggestions in the Java Language specification -->
		<module name="ModifierOrder"/>
		<!-- Checks for redundant modifiers -->
		<module name="RedundantModifier"/>

		<!-- Checks for blocks -->
		<!-- http://checkstyle.sf.net/config_blocks.html -->

		<!-- Checks for the placement of left curly braces ('{') for code blocks -->
		<module name="LeftCurly"/>
		<!-- Checks for braces around code blocks -->
		<module name="NeedBraces"/>
		<!-- Checks the placement of right curly braces ('}') for else, try, catch blocks are on the same line -->
		<module name="RightCurly"/>
		<!-- Checks nested blocks, i.e. blocks that are used freely in the code -->
		<module name="AvoidNestedBlocks">
			<property name="allowInSwitchCase" value="true"/> <!-- Allow nested blocks in switch -->
		</module>

		<!-- Checks for common coding problems -->
		<!-- http://checkstyle.sf.net/config_coding.html -->

		<!-- Checks that String literals are on the left side of an equals() comparison -->
		<module name="EqualsAvoidNull"/>
		<!-- Checks that a local variable does not shadow a field that is defined in the same class -->
		<module name="HiddenField">
			<property name="tokens" value="VARIABLE_DEF"/>
		</module>
		<!-- Check that java.lang.Boolean is not directly instantiated -->
		<module name="IllegalInstantiation">
			<property name="classes" value="java.lang.Boolean"/>
		</module>
		<!-- Checks that switch statement has "default" clause -->
		<module name="MissingSwitchDefault"/>
		<!-- Checks for overly complicated boolean expressions -->
		<module name="SimplifyBooleanExpression"/>
		<!-- Checks for overly complicated boolean return statements -->
		<module name="SimplifyBooleanReturn"/>

		<!-- Checks for class design -->
		<!-- http://checkstyle.sf.net/config_design.html -->

		<!-- Checks visibility of class members -->
		<module name="VisibilityModifier">
			<property name="protectedAllowed" value="true"/>
				<property name="packageAllowed" value="true"/>
			<property name="publicMemberPattern" value="^(serialVersionUID|jUnitTestName)$"/>
			<property name="ignoreAnnotationCanonicalNames" value="org.junit.jupiter.api.extension.RegisterExtension, com.google.common.annotations.VisibleForTesting, org.junit.runners.Parameterized.Parameter"/>
		</module>
		<!-- Checks that a class which has only private constructors is declared as final -->
		<module name="FinalClass"/>
		<!-- It is inappropriate to define an interface that does not contain any methods but only constants -->
		<module name="InterfaceIsType"/>
		<!-- Make sure that utility classes (only static methods/fields) do not have a public constructor -->
		<module name="HideUtilityClassConstructor"/>

		<!-- Miscellaneous checks -->
		<!-- http://checkstyle.sf.net/config_misc.html -->

		<!-- Checks that long constants are defined with an upper ell -->
		<module name="UpperEll"/>
		<!-- Checks the style of array type definitions -->
		<module name="ArrayTypeStyle"/>
		<!-- Checks correct indentation of Java Code -->
		<!-- Annotations -->
		<!-- http://checkstyle.sourceforge.net/config_annotation.html -->

		<!-- This check controls the style with the usage of annotations -->
		<module name="AnnotationUseStyle"/>
		<!-- Verifies that both java.lang.Deprecated and @deprecated Javadoc tag is present when either is present -->
		<module name="MissingDeprecated"/>
		<!-- Verifies that java.lang.Override is present when @inheritDoc Javadoc tag is present -->
		<module name="MissingOverride"/>

	</module>
</module>
